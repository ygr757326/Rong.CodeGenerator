@using System.Linq
@using Rong.Volo.Abp.CodeGenerator.Vue.Models.Pages
@inherits Volo.Abp.TextTemplating.Razor.RazorTemplatePageBase<TemplateVuePageAddModel>

@{
    var hasEditor = Model.Form.Any(a => a.IsEditor);
    var hasTinymceEditor = hasEditor && (Model.EntityInfo.Options.EditorComponent == null || Model.EntityInfo.Options.EditorComponent == "Tinymce");
    string? useComponentRegister = hasTinymceEditor ? ", useComponentRegister" : null;
    string? useTinymce = hasTinymceEditor ? "import { Tinymce } from '@/components/Tinymce/index';" : null;
    string? registerTinymce = hasTinymceEditor ? "useComponentRegister('Tinymce', Tinymce);" : null;
    string? width = hasEditor ? "85%" : "800px";
   
}
<template>
    <a-drawer v-model:visible="visible" title="新增 - @Model.EntityInfo.EntityName" width="@width">
    <template #extra>
      <a-button @@click="visible = false">取消</a-button>
      <a-button @@click="handleSubmit" type="primary" style="margin-left: 20px">提交</a-button>
    </template>
    <div>
      <BasicForm @@register="Register" v-if="visible">
        <!-- <template #healthAttachs="{ model, field }"></template> -->
      </BasicForm>
    </div>
  </a-drawer>
</template>

<script lang="ts" setup>
  import { nextTick, ref } from 'vue';
  import { @{@Model.EntityInfo.Entity}Create } from '../api';
  import { BasicForm, FormSchema, useForm @useComponentRegister } from '@@/components/Form/index';
  import { useDictStore } from '@@/store/modules/dict';
  import { useEnumStore } from '@@/store/modules/enum';
  @useTinymce
  @registerTinymce
  const dictStore = useDictStore();
  const enumStore = useEnumStore();
  const visible = ref<Boolean>(false);
  const $emit = defineEmits(['success']);

  /**
   * 表单
   */
  const schemas: FormSchema[] = [
  @Model.FormTemplate
  ];

  /**
   * 表单配置
   */
  const [Register, { validateFields, getFieldsValue, resetFields }] = useForm({
    labelWidth: 120,
    schemas,
    actionColOptions: {
      span: 12,
    },
    baseColProps: {
      span: 24,
    },
    // 是否显示操作按钮
    showActionButtonGroup: false,
  });

 /**
  * 提交表单
  */
  async function handleSubmit() {
    //验证
    await validateFields();
    //获取
    const data: any = getFieldsValue();
    //创建
    await @{@Model.EntityInfo.Entity}Create(data);
    //关闭弹窗
    visible.value = false;

    $emit('success');
  }

 /**
  * 打开弹窗
  */
  function open() {
    visible.value = true;
    nextTick(() => {
      resetFields();
    });
  }

  defineExpose({ open });

</script>