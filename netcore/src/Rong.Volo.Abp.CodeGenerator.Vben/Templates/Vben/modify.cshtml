@using Rong.Volo.Abp.CodeGenerator.Vue.Models;
@inherits Volo.Abp.TextTemplating.Razor.RazorTemplatePageBase<TemplateVueModifyModel>
@{
    string schemas = null;
    foreach (var item in Model.Form)
    {
        schemas += $"{{label: '{@item.DisplayName}', field: '{@item.PropertyCase}', component: 'Input', required: {char.ToLowerInvariant(item.IsRequired.ToString()[0]) + item.IsRequired.ToString().Substring(1)}, }},\r\n";
    }
}
<template>
<a-drawer v-model:visible="visible" :title="title" width="800px">
  <template #extra>
    <a-button @@click="visible = false">取消</a-button>
    <a-button @@click="handleSubmit" type="primary" style="margin-left: 20px">提交</a-button>
  </template>
  <div ref="modifyFormRef">
    <BasicForm @@register="Register">
      <template #logo="{ model, field }">
        <GzUploadFile v-model="model[field]" />
      </template>
    </BasicForm>
  </div>
</a-drawer>
</template>

<script lang="ts" setup>

import { nextTick, ref } from 'vue';
import { @{@Model.Entity}Get, @{@Model.Entity}Update } from 'api';
import { BasicForm, FormSchema, useForm } from '@@/components/Form/index';
import { useLoading } from '@@/components/Loading';

const modifyFormRef = ref(null);

const [openWrapLoading, closeWrapLoading] = useLoading({
  target: modifyFormRef,
  props: {
    absolute: true,
  },
});

const visible = ref<boolean>(false);
const title = ref<string>('编辑');
const $emit = defineEmits(['success']);

/**
 * 表单
 */
const schemas: FormSchema[] = [
    @schemas
];

/**
 * 表单配置
 */
const [Register, { validateFields, getFieldsValue, setFieldsValue, resetFields }] = useForm({
  labelWidth: 120,
  schemas,
  actionColOptions: {
    span: 12,
  },
  // 是否显示操作按钮
  showActionButtonGroup: false,
});


/**
 * 提交表单 - 修改
 */
async function handleSubmit() {
  await validateFields();
  const data: any = getFieldsValue();
  await @{@Model.Entity}Update(data.id, data);
  visible.value = false;
  $emit('success');
}

/*
* 获取详情
/*/
async function getData(data) {
  @{@Model.Entity}Get(data.id)
    .then((res) => {
      setFieldsValue(res);
    })
    .finally(() => {
      closeWrapLoading();
    });
}

/**
 * 弹框
 */
function open(data) {
  visible.value = true;
  nextTick(() => {
    resetFields();
  });
  openWrapLoading();
  title.value = '编辑';
  getData({ id: data.id });
}
defineExpose({ open });

</script>
